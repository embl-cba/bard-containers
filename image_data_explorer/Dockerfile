ARG TAG=3.2
FROM registry.git.embl.de/grp-cbbcs/abcdesktop-apps/base-image:ubuntu22-cuda-12-3

USER root
ENV DEBIAN_FRONTEND noninteractive
ENV TZ Europe/Berlin
ENV NVIDIA_DRIVER_CAPABILITIES "all"
ENV PATH=/usr/local/cuda-11.4/bin${PATH:+:${PATH}}
ENV LD_LIBRARY_PATH=/usr/local/cuda-12.3/lib64$LD_LIBRARY_PATH:$CONDA_PREFIX/lib/

RUN add-apt-repository -y ppa:mozillateam/ppa && \
    printf 'Package: firefox*\nPin: release o=LP-PPA-mozillateam\nPin-Priority: 1001\n' > /etc/apt/preferences.d/mozilla-firefox 

RUN apt install -y wget && wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc |gpg --dearmor -o /usr/share/keyrings/r-project.gpg && \
    echo "deb [signed-by=/usr/share/keyrings/r-project.gpg] https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/" | tee -a /etc/apt/sources.list.d/r-project.list && apt update -y

RUN  apt-get install -y libasound2 apt-utils apt-transport-https software-properties-common gnupg2 build-essential r-base r-base-dev libssl-dev liblzma-dev libbz2-dev libicu-dev libtiff-dev libfftw3-dev libcurl4-openssl-dev libxml2-dev libssh2-1-dev libgit2-dev libfontconfig1-dev libfreetype-dev libharfbuzz-dev libfribidi-dev default-jre default-jdk git konsole firefox
 


RUN R CMD javareconf


RUN mkdir -p /opt/ide/app && mkdir -p /opt/ide/R/libs && echo 'R_LIBS=/opt/ide/R/libs\n' > /opt/ide/.Renviron

# Copy the app to the image
RUN cd /opt/ide/app && git clone https://git.embl.de/heriche/image-data-explorer.git

# Install required R packages
ENV R_LIBS="/opt/ide/R/libs"
RUN R -e "install.packages(c('remotes', 'rversions', 'roxygen2', 'xml2', 'devtools'), repos=c('https://cloud.r-project.org/', 'https://ftp.gwdg.de/pub/misc/cran/')); \
install.packages(c('data.table', 'shiny', 'DT', 'shinyFiles', 'shinycssloaders', 'shinydashboard', 'shinyjs', 'shinyWidgets', 'shinybusy', 'assertthat'), repos=c('https://cloud.r-project.org/', 'https://ftp.gwdg.de/pub/misc/cran/')); \
install.packages(c('ggplot2', 'plotly', 'RANN', 'MASS', 'dbscan', 'uwot', 'xgboost', 'Ckmeans.1d.dp', 'e1071', 'caret', 'RColorBrewer', 'aws.s3', 'configr'), repos=c('https://cloud.r-project.org/', 'https://ftp.gwdg.de/pub/misc/cran/')); \
install.packages('BiocManager', repos=c('https://cloud.r-project.org/', 'https://ftp.gwdg.de/pub/misc/cran/')); \
install.packages(c('rJava', 'RCurl')); BiocManager::install('EBImage'); BiocManager::install('aoles/RBioFormats'); \
BiocManager::install('Rarr'); library(devtools); setwd('/opt/ide/app/image-data-explorer/imageViewer'); install(); devtools::install_git('https://git.embl.de/heriche/omerarr')"

# IDE is available on port 5476
EXPOSE 5476

# We need to make sure AWS env variables are defined 
# otherwise the R package aws.s3 defaults to us-east-1
# even when region is explicitly set to "" in the code
ENV AWS_S3_ENDPOINT=""
ENV AWS_ACCESS_KEY_ID=""
ENV AWS_SECRET_ACCESS_KEY=""
ENV AWS_DEFAULT_REGION=""


LABEL oc.icon="ide-logo.svg"
LABEL oc.icondata=""
LABEL oc.keyword="R,IDE"
LABEL oc.cat="development"
LABEL oc.desktopfile="org.kde.konsole.desktop"
LABEL oc.launch="ide.konsole"
LABEL oc.template="abcdesktopio/oc.template.ubuntu.nvidia.20.04"
LABEL oc.name="ide"
LABEL oc.displayname="Image Data Explorer"
LABEL oc.path="/usr/bin/konsole"
LABEL oc.args="--hold -e bash --rcfile /usr/local/bin/startide.sh"
LABEL oc.type=app
LABEL oc.showinview="dock"
LABEL oc.rules="{\"homedir\":{\"default\":true}}"
LABEL oc.acl="{\"permit\":[\"all\"]}"

RUN  if [ -d /usr/share/icons ]   && [ -x /composer/safelinks.sh ] && [ -d /usr/share/icons   ];  then cd /usr/share/icons;    /composer/safelinks.sh; fi 
RUN  if [ -d /usr/share/pixmaps ] && [ -x /composer/safelinks.sh ] && [ -d /usr/share/pixmaps ];  then cd /usr/share/pixmaps;  /composer/safelinks.sh; fi 
ENV APPNAME "ide"
ENV APPBIN "/usr/bin/konsole"
ENV APP "/usr/bin/konsole"
ENV ARGS "--hold -e bash --rcfile /usr/local/bin/startide.sh"
ENV LD_LIBRARY_PATH "/usr/local/nvidia/lib:/usr/local/nvidia/lib64",
ENV NVIDIA_DRIVER_CAPABILITIES "compute,utility"


RUN mkdir -p /run/user/
RUN chmod 777 /run/user
COPY startide.sh /usr/local/bin/startide.sh
RUN chmod 0755 /usr/local/bin/startide.sh
RUN mkdir -p /etc/localaccount
RUN for f in passwd shadow group gshadow ; do if [ -f /etc/$f ] ; then  cp /etc/$f /etc/localaccount; rm -f /etc/$f; ln -s /etc/localaccount/$f /etc/$f; fi; done

CMD [ "/composer/appli-docker-entrypoint.sh" ]


